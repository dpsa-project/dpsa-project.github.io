window.SIDEBAR_ITEMS = {"enum":[["BuildError","Possible errors returned when [`PoolBuilder::build()`] fails to build a [`Pool`]."],["CreatePoolError","This error is used when building pools via the config `create_pool` methods."],["Hook","Wrapper for hook functions"],["HookError","Error structure which which can abort the creation and recycling of objects."],["HookErrorCause","Possible errors returned by hooks"],["PoolError","Possible errors returned by `Pool::get()` method."],["RecycleError","Possible errors returned by the `Manager::recycle()` method."],["TimeoutType","Possible steps causing the timeout in an error returned by `Pool::get()` method."]],"mod":[["reexports","This module contains all things that should be reexported by backend implementations in order to avoid direct dependencies on the `deadpool` crate itself."],["sync","Helpers for writing pools for objects that donâ€™t support async and need to be run inside a thread."]],"struct":[["Metrics","Statistics regarding an object returned by the pool"],["Object","Wrapper around the actual pooled object which implements [`Deref`], [`DerefMut`] and [`Drop`] traits."],["Pool","Generic object and connection pool."],["PoolBuilder","Builder for [`Pool`]s."],["PoolConfig","`Pool` configuration."],["Timeouts","Timeouts when getting `Object`s from a `Pool`."]],"trait":[["Manager","Manager responsible for creating new [`Object`]s or recycling existing ones."]],"type":[["HookFuture","The boxed future that should be returned by async hooks"],["HookResult","The result returned by hooks"],["RecycleResult","Result type of the [`Manager::recycle()`] method."]]};