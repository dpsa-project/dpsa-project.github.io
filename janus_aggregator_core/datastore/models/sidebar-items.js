window.SIDEBAR_ITEMS = {"enum":[["AggregationJobState","AggregationJobState represents the state of an aggregation job. It corresponds to the AGGREGATION_JOB_STATE enum in the schema."],["AggregatorRole","AggregatorRole corresponds to the `AGGREGATOR_ROLE` enum in the schema."],["AuthenticationTokenType","AuthenticationTokenType represents the type of an authentication token. It corresponds to enum `AUTH_TOKEN_TYPE` in the schema."],["BatchAggregationState","Represents the state of a batch aggregation."],["BatchState","Represents the state of a `Batch`."],["CollectionJobState",""],["CollectionJobStateCode",""],["ReportAggregationState","ReportAggregationState represents the state of a single report aggregation. It corresponds to the REPORT_AGGREGATION_STATE enum in the schema, along with the state-specific data."],["ReportAggregationStateCode",""]],"struct":[["AcquiredAggregationJob","AcquiredAggregationJob represents an incomplete aggregation job whose lease has been acquired."],["AcquiredCollectionJob","AcquiredCollectionJob represents an incomplete collection job whose lease has been acquired."],["AggregateShareJob","AggregateShareJob represents a row in the `aggregate_share_jobs` table, used by helpers to store the results of handling an AggregateShareReq from the leader."],["AggregationJob","AggregationJob represents an aggregation job from the DAP specification."],["Batch","Represents the state of a given batch (and aggregation parameter)."],["BatchAggregation","BatchAggregation corresponds to a row in the `batch_aggregations` table and represents the possibly-ongoing aggregation of the set of input shares that fall within the batch identified by `batch_identifier`. This is the finest-grained possible aggregate share we can emit for this task. The aggregate share constructed to service a collect or aggregate share request consists of one or more `BatchAggregation`s merged together."],["CollectionJob","CollectionJob represents a row in the `collection_jobs` table, used by leaders to represent running collection jobs and store the results of completed ones."],["LeaderStoredReport","Represents a report as it is stored in the leader’s database, corresponding to a row in `client_reports`, where `leader_input_share` and `helper_encrypted_input_share` are required to be populated."],["Lease","Lease represents a time-constrained lease for exclusive access to some entity in Janus. It has an expiry after which it is no longer valid; another process can take a lease on the same entity after the expiration time."],["LeaseToken","LeaseToken represents an opaque value used to determine the identity of a lease."],["OutstandingBatch","An outstanding batch, which is a batch which has not yet started collection. Such a batch may have additional reports allocated to it. Only applies to fixed-size batches."],["ReportAggregation","ReportAggregation represents a the state of a single client report’s ongoing aggregation."],["SqlInterval","Wrapper around [`janus_messages::Interval`] that supports conversions to/from SQL."]]};